#!/usr/bin/env python
import subprocess
import urlparse
import tempfile
import os.path
import shlex
import requests
import click

import libcask.containergroup
import libcask.imagegroup


cgroup = libcask.containergroup.ContainerGroup('/data/cask/group/containers.json')
igroup = libcask.imagegroup.ImageGroup('/data/cask/group/images.json')


@click.group()
def group():
    pass


@group.command('ls')
def ls():
    """List containers"""
    list_format = '{name:<32} {status:<7} {pid:<7} {ipaddr:<16}'

    print list_format.format(
        name='Container Name',
        status='Status',
        pid='PID',
        ipaddr='IP Address',
    )

    for container in cgroup.containers.values():
        print list_format.format(
            name=container.name,
            status='up' if container.status() else 'down',
            pid=container.pid() or '',
            ipaddr=container.ipaddr,
        )


@group.command('create')
@click.argument('container')
@click.argument('image', required=False, default=None)
@click.option('--entrypoint', default=None)
@click.option('--ip', default=None)
def create(container, image, entrypoint, ip):
    """Create a new container from an image"""
    cont = cgroup.create(container)

    if image:
        igroup.unfreeze(image, cont)
    if entrypoint:
        cgroup.set_attribute(container, 'entrypoint', entrypoint)
    if ip:
        cgroup.set_attribute(container, 'ip', ip)

    print 'Created container', cont.name


@group.command('freeze')
@click.argument('container')
@click.argument('image')
def freeze(container, image):
    """Freeze a container's state to an image"""
    cont = cgroup.get(container)
    igroup.freeze(image, cont)


@group.command('start')
@click.argument('container')
def start(container):
    """Start up a stopped container"""
    cont = cgroup.get(container)
    cont.start()


@group.command('pid')
@click.argument('container')
def pid(container):
    """Show the host PID of a running container"""
    cont = cgroup.get(container)
    pid = cont.pid()
    if not pid:
        print 'Container is not running'
        return
    print 'Container is running with PID:', pid


@group.command('kill')
@click.argument('container')
def kill(container):
    """Send a signal to a running container"""
    cont = cgroup.get(container)
    cont.kill()
    print 'Container killed'


@group.command('set')
@click.argument('container')
@click.argument('name')
@click.argument('value')
def container_set(container, name, value):
    """Set an attribute of a container"""
    cgroup.set_attribute(container, name, value)


@group.command('copy')
@click.argument('container')
@click.argument('host_path')
@click.argument('container_path')
def copy(container, host_path, container_path):
    """Copy a file from host to container filesystem"""
    cont = cgroup.get(container)
    cont.copy_file(host_path, container_path)


@group.command('run')
@click.argument('container')
@click.argument('command')
def run(container, command):
    """Run a command within a running container"""
    cont = cgroup.get(container)
    command = shlex.split(command)

    with cont.get_attachment().attach():
        subprocess.call(command)


@group.command('tail')
@click.option('-f', is_flag=True)
@click.argument('container')
def tail(container, f):
    """Show container logs"""
    cont = cgroup.get(container)
    if f:
        subprocess.call(['tail', '-f', cont.log_path])
    else:
        subprocess.call(['tail', cont.log_path])


@group.command('destroy')
@click.argument('container')
def destroy(container):
    """Completely destroy a container"""
    cgroup.destroy(container)


@group.command('image.ls')
def image_ls():
    """List available images"""
    list_format = '{name:<32}'

    print list_format.format(
        name='Image Name',
    )

    for image in igroup.images.values():
        print list_format.format(
            name=image.name,
        )


@group.command('image.export')
@click.argument('image')
@click.argument('export_filename')
def image_export(image, export_filename):
    """Export an image to an archive file"""
    igroup.export_to(image, export_filename) 


@group.command('image.import')
@click.argument('image')
@click.argument('import_filename')
def image_import(image, import_filename):
    """Import an image from an archive file or URL"""
    if urlparse.urlsplit(import_filename).scheme.startswith('http'):
        print 'Intepreting', import_filename, 'as URL'
        _, temp_path = tempfile.mkstemp()

        r = requests.get(import_filename, stream=True)
        r.raise_for_status()
        with open(temp_path, 'wb') as f:
            for chunk in r.iter_content(1024):
                f.write(chunk)
 
        igroup.import_from(image, temp_path)
        return

    igroup.import_from(image, import_filename) 


@group.command('image.destroy')
@click.argument('image')
def image_destroy(image):
    """Completely destroy an image"""
    igroup.destroy(image)


if __name__ == '__main__':
    group()
