#!/usr/bin/env python
import subprocess
import os.path
import click

import libcask.group


cgroup = libcask.group.ContainerGroup('/data/cask/group')


@click.group()
def group():
    pass


@group.command('create')
@click.argument('container')
@click.option('--default', is_flag=True)
def create(container, default=False):
    cont = cgroup.create(container)

    if default:
        tgz_path = os.path.join(cont.root_path, 'default.tar.gz')
        subprocess.check_call([
            'curl', '-L', '-o', tgz_path, 'https://ianpreston.io/cask/images/default.tar.gz',
        ])
        subprocess.check_call([
            'tar', '-xvf', tgz_path, '-C', cont.root_path,
        ])

@group.command('start')
@click.argument('container')
def start(container):
    cont = cgroup.get(container)
    cont.start()


@group.command('pid')
@click.argument('container')
def pid(container):
    cont = cgroup.get(container)
    pid = cont.pid()
    if not pid:
        print 'Container is not running'
        return
    print 'Container is running with PID:', pid


@group.command('status')
@click.argument('container')
def status(container):
    cont = cgroup.get(container)
    if cont.status():
        pid = cont.pid()
        print 'Container `{name}` is running with pid {pid}'.format(name=container, pid=pid)
    else:
        print 'Container `{name}` is down'.format(name=container)


@group.command('kill')
@click.argument('container')
def kill(container):
    cont = cgroup.get(container)
    cont.kill()
    print 'Container killed'


@group.command('shell')
@click.argument('container')
def shell(container):
    cont = cgroup.get(container)
    with cont.get_attachment().attach():
        subprocess.call('sh')


if __name__ == '__main__':
    group()
