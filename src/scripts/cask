#!/usr/bin/env python
import subprocess
import os.path
import click

import libcask.group
import libcask.imagegroup


cgroup = libcask.group.ContainerGroup('/data/cask/group/containers.json')
igroup = libcask.imagegroup.ImageGroup('/data/cask/group/images.json')


@click.group()
def group():
    pass


@group.command('ls')
def ls():
    list_format = '{name:<32} {status:<7} {pid:<7} {ipaddr:<16}'

    print list_format.format(
        name='Container Name',
        status='Status',
        pid='PID',
        ipaddr='IP Address',
    )

    for container in cgroup.containers.values():
        print list_format.format(
            name=container.name,
            status='up' if container.status() else 'down',
            pid=container.pid() or '',
            ipaddr=container.ipaddr,
        )


@group.command('create')
@click.argument('container')
@click.option('--default', is_flag=True)
def create(container, default=False):
    cont = cgroup.create(container)

    if default:
        tgz_path = os.path.join(cont.root_path, 'default.tar.gz')
        subprocess.check_call([
            'curl', '-L', '-o', tgz_path, 'https://ianpreston.io/cask/images/default.tar.gz',
        ])
        subprocess.check_call([
            'tar', '-xvf', tgz_path, '-C', cont.root_path,
        ])


@group.command('freeze')
@click.argument('container')
@click.argument('image')
def freeze(container, image):
    cont = cgroup.get(container)
    igroup.freeze(image, cont)


@group.command('unfreeze')
@click.argument('image')
@click.argument('container')
def create(image, container):
    cont = cgroup.create(container)
    igroup.unfreeze(image, cont)


@group.command('start')
@click.argument('container')
def start(container):
    cont = cgroup.get(container)
    cont.start()


@group.command('pid')
@click.argument('container')
def pid(container):
    cont = cgroup.get(container)
    pid = cont.pid()
    if not pid:
        print 'Container is not running'
        return
    print 'Container is running with PID:', pid


@group.command('kill')
@click.argument('container')
def kill(container):
    cont = cgroup.get(container)
    cont.kill()
    print 'Container killed'


@group.command('shell')
@click.argument('container')
def shell(container):
    cont = cgroup.get(container)
    with cont.get_attachment().attach():
        subprocess.call('sh')


@group.command('tail')
@click.option('-f', is_flag=True)
@click.argument('container')
def tail(container, f):
    cont = cgroup.get(container)
    if f:
        subprocess.call(['tail', '-f', cont.log_path])
    else:
        subprocess.call(['tail', cont.log_path])


@group.command('destroy')
@click.argument('container')
def destroy(container):
    cgroup.destroy(container)


@group.command('image.ls')
def image_ls():
    list_format = '{name:<32}'

    print list_format.format(
        name='Image Name',
    )

    for image in igroup.images.values():
        print list_format.format(
            name=image.name,
        )


@group.command('image.destroy')
@click.argument('image')
def image_destroy(image):
    igroup.destroy(image)


if __name__ == '__main__':
    group()
